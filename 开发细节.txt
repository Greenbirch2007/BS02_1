1. 看一下小林改进(日文开发文档)
2。 V2.0 (jsp参考代码)


python+mysql
登录，取引先。社员



2021.4.25梳理开发逻辑
1. 前端代码搜集

2.逻辑梳理

3. Flask开始搭建项目


TG0002
ログイン画面


2021.5.2 

1. 在windows上安装jdk,tomcat 先把原始项目运行起来！（jdk,tomcat完成）
2. 无法实际测试，登陆页面。直接自己改写前端吧！
3. 单点登陆问题。 直接用写入html的开发语言一句话的事情，不然还得用js！
jsp直接写前端即可！不然要会用js（还不如干脆学些JSP，不然太费劲！）
直接尝试用js取值吧！再熟悉的过程！
解决在flask中的css引入问题

    <link type="text/css" href="{{ url_for('static', filename='css/index.css') }}" rel="stylesheet">

还有载入js,图片的问题
不能继承就全部重写一遍！
4 . 使用flask专有的渲染模板解决头部的问题
5. 继承了但是图片位置有偏移！需要解决！
标签偏移！（暂放，明天开始按照文档去过！）
头部要以 <table class="login"></table> 作为左边开头
头部要以<table class="box"></table>  作为右边结尾
上面相当于在下面框架内
登陆点击要居中！（初步完成）


2021.5.3  

开始整理文档的需求
登陆页面 概要
1. システム起動時、表示する画面です。ユーザログインを行います
系统启动时显示此屏幕。 以用户身份登录

２．１　初期表示																								
２．１．１　入力欄																							
No	入力項目		初期表示																
1	ユーザID		cookiファイルにより前回登録したユーザID　(なければ空欄)																
2	パスワード	空欄																
※ブラウザ自動入力内容保存機能は無効にする																						

（部分内容看样子已经被实现了！）
2.1初始显示
2.1.1输入栏
否输入项目初始显示
1用户ID上次使用cooki文件注册的用户ID（如果不可用，则为空白）
2密码空白
*禁用浏览器自动输入内容保存功能

２．２　ログイン情報入力																														
入力項目一覧																													
No	入力項目		必須/任意	 文字種								文字数			備考									
1	ユーザID		必須	"[a-z]、[A-Z]、[0-9]、「_」、「-」のみ"	８～20文字												
2	パスワード	必須	[a-z]、[A-z]、[0-9]のみ 		８～15文字                           暗号化文字（●●●）で表示する									

２．３　ログインボタンクリック																					
２．３．１　入力チェックを行う。																				
画面側でJSでチェックを行う																			
																					
①エラーがある場合はエラーメッセージを表示しつつ自画面遷移																			
※入力項目、エラーメッセージは下記参照。JSアラートで表示する。																		
No	チェックの種類	エラーメッセージ												
1	必須		（入力項目）を入力してください。												
2	文字種		（入力項目）は（文字種）で入力してください。												
3	文字数		（入力項目）は（文字数）以下で入力してください。												
②エラーがない場合は、ユーザ認証チェックを行う																			


2.3单击登录按钮
2.3.1检查输入。
在屏幕一侧检查JS
。
①如果有错误，则在显示错误消息时屏幕将切换。
*有关输入项和错误消息，请参见下文。 与JS警报一起显示。
否检查类型错误消息
1输入所需的项目（输入项目）。
2在（字符类型）中输入字符类型（输入项目）。
3在下面输入字符数（输入项目）（字符数）。
（2）如果没有错误，请执行用户身份验证检查。


２．３．２　ユーザ認証チェックを行う																							
サーバ側でDBのユーザ管理情報テーブルと連携し、認証を行う																						
																							
取得内容			全て																		
テーブル名			ユーザ認証																		
検索条件																					
ユーザコード　＝　＜画面上で入力したユーザID＞																					
																							
◆1レコード取得できる場合																					
プログラムでPSWの認証を行う																				
◆DB.パスワード＜＞画面.パスワード(MD5で暗号化した内容)																				
パスワード認証エラー																			
◆0レコードの場合																					
DBエラー																				


2.3.2用户身份验证检查
通过链接服务器端的数据库用户管理信息表进行身份验证
。
所有获得的内容
表名用户认证
搜索条件
用户代码= <在屏幕上输入的用户ID>
。
◆如果您能获得1条记录
以编程方式验证PSW
◆DB.Password <>屏幕。Password（MD5加密的内容）
密码验证错误
◆共有0条记录
DB错误2.3.2用户身份验证检查
通过链接服务器端的数据库用户管理信息表进行身份验证
。
所有获得的内容
表名用户认证
搜索条件
用户代码= <在屏幕上输入的用户ID>
。
◆如果您能获得1条记录
以编程方式验证PSW
◆DB.Password <>屏幕。Password（MD5加密的内容）
密码验证错误
◆共有0条记录
DB错误

該当ユーザーが存在しません。									
对应的用户不存在。（界面上显示红色）



◆登録されたユーザID、パスワードの組み合わせに誤りがある場合																				
１）ユーザ情報保持用セッション情報をクリアする																			
２）エラーメッセージを表示しつつ自画面遷移																			
エラーメッセージは下記参照。																			
No	チェックの種類	メッセージ													
1	ユーザ名認証	DBエラー													
1	PSW認証		パスワードが間違っています。													
																				
※エラーの場合は、下記のように、ログインボタンの直下に赤字で表示																			

◆注册的用户名和密码的组合有误时
1）清除会话信息以保存用户信息
2）在显示错误消息时进行自我屏幕转换
请参阅以下错误消息。
没有检查类型的消息
1个用户名认证数据库错误
1 PSW验证密码不正确。
。
*发生错误时，登录按钮下方将以红色显示，如下所示。

パスワードが間違っています。									
您的密码不正确


◆登録されたユーザID、パスワードの組み合わせがあっている場合																
１）ユーザIDを保持用セッションに格納（あれば差し替え）															
２）cookiファイルにユーザIDを格納（あれば差し替え）															
３）DBの登録履歴に以下の情報を記入															
・ユーザコード														
・ログイン画面ID														
４）作業催促画面へ遷移															


◆当注册的用户名和密码结合在一起时
1）将用户ID存储在保留会话中（如果有则替换）
2）将用户ID存储在cooki文件中（如果有则替换）
3）在数据库注册历史中输入以下信息
·用户密码
・登录画面ID
4）转到工作提醒屏幕

３．備考																												
すでにログイン済みのチェックは不要。（社内管理システムの利用する人は10人以下なので、難しい認証が不要）																												
ただ利用中に何か問題が発生したら、また再構築します。																												


3. 3。 评论
无需检查您是否已经登录。 （由于使用内部管理系统的人数为10个或更少，因此无需进行困难的身份验证）
但是，如果在使用过程中出现问题，我们将再次对其进行重建。

2021.5.9

flask的宏定义相当于在html使用jsp.定义函数，进行交互！

2021.5.10


 
在编写html时
WTForms render_field（）方法参考循环变量

写编写视图函数时

如果数据是通过 HTTP POST 方法提交的，请根据 form 的值创建表单。如果是通过 GET 方法提交的， 则相应的是 args 。

调用 validate() 函数来验证数据。如果验证通过，则 函数返回 True ，否则返回 False 。

通过 form.<NAME>.data 可以访问表单中单个值

难一点可以使用数据库进行验证， 但是先把前面搞定吧！